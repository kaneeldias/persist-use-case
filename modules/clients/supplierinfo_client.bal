import ballerina/sql;
import ballerinax/mysql;
import ballerina/persist;

public client class SupplierInfoClient {

    private final string entityName = "SupplierInfo";
    private final sql:ParameterizedQuery tableName = `SupplierInfo`;

    private final map<persist:FieldMetadata> fieldMetadata = {
        supplierId: {columnName: "supplierId", 'type: int, autoGenerated: true},
        name: {columnName: "name", 'type: string},
        shortName: {columnName: "shortName", 'type: string},
        email: {columnName: "email", 'type: string},
        phoneNumber: {columnName: "phoneNumber", 'type: string},
        "quotes[].quoteId": {'type: int, relation: {entityName: "quote", refTable: "Quotes", refField: "quoteId"}},
        "quotes[].maxQuantity": {'type: int, relation: {entityName: "quote", refTable: "Quotes", refField: "maxQuantity"}},
        "quotes[].period": {'type: int, relation: {entityName: "quote", refTable: "Quotes", refField: "period"}},
        "quotes[].brandName": {'type: string, relation: {entityName: "quote", refTable: "Quotes", refField: "brandName"}},
        "quotes[].unitPrice": {'type: int, relation: {entityName: "quote", refTable: "Quotes", refField: "unitPrice"}},
        "quotes[].expiryDate": {'type: int, relation: {entityName: "quote", refTable: "Quotes", refField: "expiryDate"}},
        "quotes[].regulatoryInfo": {'type: string, relation: {entityName: "quote", refTable: "Quotes", refField: "regulatoryInfo"}}
    };  
    private string[] keyFields = ["supplierId"];

    private final map<persist:JoinMetadata> joinMetadata = {};

    private persist:SQLClient persistClient;

    public function init() returns persist:Error? {
        mysql:Client|sql:Error dbClient = new (host = host, user = user, password = password, database = database, port = port);
        if dbClient is sql:Error {
            return <persist:Error>error(dbClient.message());
        }
        self.persistClient = check new (dbClient, self.entityName, self.tableName, self.keyFields, self.fieldMetadata, self.joinMetadata);
    }

    remote function create(SupplierInfo value) returns SupplierInfo|persist:Error {
        sql:ExecutionResult result = check self.persistClient.runInsertQuery(value);
        return {supplierId: <int>result.lastInsertId, name: value.name, shortName: value.shortName, email: value.email, phoneNumber: value.phoneNumber, quotes: value.quotes};
    }

    remote function readByKey(int key) returns SupplierInfo|persist:Error {
        return <SupplierInfo>check self.persistClient.runReadByKeyQuery(SupplierInfo, key);
    }

    remote function read() returns stream<SupplierInfo, persist:Error?> {
        stream<anydata, sql:Error?>|persist:Error result = self.persistClient.runReadQuery(SupplierInfo);
        if result is persist:Error {
            return new stream<SupplierInfo, persist:Error?>(new SupplierInfoStream((), result));
        } else {
            return new stream<SupplierInfo, persist:Error?>(new SupplierInfoStream(result));
        }
    }

    remote function execute(sql:ParameterizedQuery filterClause) returns stream<SupplierInfo, persist:Error?> {
        stream<anydata, sql:Error?>|persist:Error result = self.persistClient.runExecuteQuery(filterClause, SupplierInfo);
        if result is persist:Error {
            return new stream<SupplierInfo, persist:Error?>(new SupplierInfoStream((), result));
        } else {
            return new stream<SupplierInfo, persist:Error?>(new SupplierInfoStream(result));
        }
    }

    remote function update(SupplierInfo value) returns persist:Error? {
        _ = check self.persistClient.runUpdateQuery(value);
    }

    remote function delete(SupplierInfo value) returns persist:Error? {
        _ = check self.persistClient.runDeleteQuery(value);
    }

    remote function exists(SupplierInfo supplierInfo) returns boolean|persist:Error {
        SupplierInfo|persist:Error result = self->readByKey(supplierInfo.supplierId);
        if result is SupplierInfo {
            return true;
        } else if result is persist:InvalidKeyError {
            return false;
        } else {
            return result;
        }
    }

    public function close() returns persist:Error? {
        return self.persistClient.close();
    }
}

public class SupplierInfoStream {

    private stream<anydata, sql:Error?>? anydataStream;
    private persist:Error? err;

    public isolated function init(stream<anydata, sql:Error?>? anydataStream, persist:Error? err = ()) {
        self.anydataStream = anydataStream;
        self.err = err;
    }

    public isolated function next() returns record {|SupplierInfo value;|}|persist:Error? {
        if self.err is persist:Error {
            return <persist:Error>self.err;
        } else if self.anydataStream is stream<anydata, sql:Error?> {
            var anydataStream = <stream<anydata, sql:Error?>>self.anydataStream;
            var streamValue = anydataStream.next();
            if streamValue is () {
                return streamValue;
            } else if (streamValue is sql:Error) {
                return <persist:Error>error(streamValue.message());
            } else {
                record {|SupplierInfo value;|} nextRecord = {value: <SupplierInfo>streamValue.value};
                return nextRecord;
            }
        } else {
            return ();
        }
    }

    public isolated function close() returns persist:Error? {
        if self.anydataStream is stream<anydata, sql:Error?> {
            var anydataStream = <stream<anydata, sql:Error?>>self.anydataStream;
            sql:Error? e = anydataStream.close();
            if e is sql:Error {
                return <persist:Error>error(e.message());
            }
        }
    }
}

