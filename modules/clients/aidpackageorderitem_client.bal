import ballerina/sql;
import ballerinax/mysql;
import ballerina/time;
import ballerina/persist;

public client class AidPackageOrderItemClient {
    *persist:AbstractPersistClient;

    private final string entityName = "AidPackageOrderItem";
    private final sql:ParameterizedQuery tableName = `AidPackageOrderItem`;

    private final map<persist:FieldMetadata> fieldMetadata = {
        id: {columnName: "id", 'type: int, autoGenerated: true},
        quantity: {columnName: "quantity", 'type: int},
        totalAmount: {columnName: "totalAmount", 'type: int},
        "package.packageId": {columnName: "packageId", 'type: int, relation: {entityName: "package", refTable: "AidPackage", refField: "packageId"}},
        "package.description": {'type: int, relation: {entityName: "package", refTable: "AidPackage", refField: "description"}},
        "package.name": {'type: string, relation: {entityName: "package", refTable: "AidPackage", refField: "name"}},
        "package.status": {'type: string, relation: {entityName: "package", refTable: "AidPackage", refField: "status"}},
        "medicalNeed.needId": {columnName: "needId", 'type: int, relation: {entityName: "medicalNeed", refTable: "MedicalNeed", refField: "needId"}},
        "medicalNeed.beneficiaryId": {'type: int, relation: {entityName: "medicalNeed", refTable: "MedicalNeed", refField: "beneficiaryId"}},
        "medicalNeed.period": {'type: time:Civil, relation: {entityName: "medicalNeed", refTable: "MedicalNeed", refField: "period"}},
        "medicalNeed.urgency": {'type: string, relation: {entityName: "medicalNeed", refTable: "MedicalNeed", refField: "urgency"}},
        "medicalNeed.quantity": {'type: int, relation: {entityName: "medicalNeed", refTable: "MedicalNeed", refField: "quantity"}},
        "supplier.supplierId": {columnName: "supplierId", 'type: int, relation: {entityName: "supplier", refTable: "SupplierInfo", refField: "supplierId"}},
        "supplier.name": {'type: string, relation: {entityName: "supplier", refTable: "SupplierInfo", refField: "name"}},
        "supplier.shortName": {'type: string, relation: {entityName: "supplier", refTable: "SupplierInfo", refField: "shortName"}},
        "supplier.email": {'type: string, relation: {entityName: "supplier", refTable: "SupplierInfo", refField: "email"}},
        "supplier.phoneNumber": {'type: string, relation: {entityName: "supplier", refTable: "SupplierInfo", refField: "phoneNumber"}},
        "quotation.quoteId": {columnName: "quoteQuoteId", 'type: int, relation: {entityName: "quotation", refTable: "Quote", refField: "quoteId"}},
        "quotation.maxQuantity": {'type: int, relation: {entityName: "quotation", refTable: "Quote", refField: "maxQuantity"}},
        "quotation.period": {'type: int, relation: {entityName: "quotation", refTable: "Quote", refField: "period"}},
        "quotation.brandName": {'type: string, relation: {entityName: "quotation", refTable: "Quote", refField: "brandName"}},
        "quotation.unitPrice": {'type: int, relation: {entityName: "quotation", refTable: "Quote", refField: "unitPrice"}},
        "quotation.expiryDate": {'type: int, relation: {entityName: "quotation", refTable: "Quote", refField: "expiryDate"}},
        "quotation.regulatoryInfo": {'type: string, relation: {entityName: "quotation", refTable: "Quote", refField: "regulatoryInfo"}}
    };
    private string[] keyFields = ["id"];

    private final map<persist:JoinMetadata> joinMetadata = {
        package: {entity: AidPackage, fieldName: "package", refTable: "AidPackage", refFields: ["packageId"], joinColumns: ["packageId"]},
        medicalNeed: {entity: MedicalNeed, fieldName: "medicalNeed", refTable: "MedicalNeed", refFields: ["needId"], joinColumns: ["needId"]},
        supplier: {entity: SupplierInfo, fieldName: "supplier", refTable: "SupplierInfo", refFields: ["supplierId"], joinColumns: ["supplierId"]},
        quotation: {entity: Quote, fieldName: "quotation", refTable: "Quote", refFields: ["quoteId"], joinColumns: ["quoteQuoteId"]}
    };

    private persist:SQLClient persistClient;

    public function init() returns persist:Error? {
        mysql:Client|sql:Error dbClient = new (host = host, user = user, password = password, database = database, port = port);
        if dbClient is sql:Error {
            return <persist:Error>error(dbClient.message());
        }
        self.persistClient = check new (dbClient, self.entityName, self.tableName, self.keyFields, self.fieldMetadata, self.joinMetadata);
    }

    remote function create(AidPackageOrderItem value) returns AidPackageOrderItem|persist:Error {
        if value.package is AidPackage {
            AidPackageClient aidPackageClient = check new AidPackageClient();
            boolean exists = check aidPackageClient->exists(<AidPackage>value.package);
            if !exists {
                value.package = check aidPackageClient->create(<AidPackage>value.package);
            }
        }
        if value.medicalNeed is MedicalNeed {
            MedicalNeedClient medicalNeedClient = check new MedicalNeedClient();
            boolean exists = check medicalNeedClient->exists(<MedicalNeed>value.medicalNeed);
            if !exists {
                value.medicalNeed = check medicalNeedClient->create(<MedicalNeed>value.medicalNeed);
            }
        }
        if value.supplier is SupplierInfo {
            SupplierInfoClient supplierInfoClient = check new SupplierInfoClient();
            boolean exists = check supplierInfoClient->exists(<SupplierInfo>value.supplier);
            if !exists {
                value.supplier = check supplierInfoClient->create(<SupplierInfo>value.supplier);
            }
        }
        if value.quotation is Quote {
            QuoteClient quoteClient = check new QuoteClient();
            boolean exists = check quoteClient->exists(<Quote>value.quotation);
            if !exists {
                value.quotation = check quoteClient->create(<Quote>value.quotation);
            }
        }
        _ = check self.persistClient.runInsertQuery(value);
        return value;
    }

    remote function readByKey(int key, AidPackageOrderItemRelations[] include = []) returns AidPackageOrderItem|persist:Error {
        return <AidPackageOrderItem>check self.persistClient.runReadByKeyQuery(AidPackageOrderItem, key, include);
    }

    remote function read(AidPackageOrderItemRelations[] include = []) returns stream<AidPackageOrderItem, persist:Error?> {
        stream<anydata, sql:Error?>|persist:Error result = self.persistClient.runReadQuery(AidPackageOrderItem, include);
        if result is persist:Error {
            return new stream<AidPackageOrderItem, persist:Error?>(new AidPackageOrderItemStream((), result));
        } else {
            return new stream<AidPackageOrderItem, persist:Error?>(new AidPackageOrderItemStream(result));
        }
    }

    remote function execute(sql:ParameterizedQuery filterClause) returns stream<AidPackageOrderItem, persist:Error?> {
        stream<anydata, sql:Error?>|persist:Error result = self.persistClient.runExecuteQuery(filterClause, AidPackageOrderItem);
        if result is persist:Error {
            return new stream<AidPackageOrderItem, persist:Error?>(new AidPackageOrderItemStream((), result));
        } else {
            return new stream<AidPackageOrderItem, persist:Error?>(new AidPackageOrderItemStream(result));
        }
    }

    remote function update(AidPackageOrderItem value) returns persist:Error? {
        _ = check self.persistClient.runUpdateQuery(value);
        if value.package is record {} {
            AidPackage aidPackageEntity = <AidPackage>value.package;
            AidPackageClient aidPackageClient = check new AidPackageClient();
            check aidPackageClient->update(aidPackageEntity);
        }
        if value.medicalNeed is record {} {
            MedicalNeed medicalNeedEntity = <MedicalNeed>value.medicalNeed;
            MedicalNeedClient medicalNeedClient = check new MedicalNeedClient();
            check medicalNeedClient->update(medicalNeedEntity);
        }
        if value.supplier is record {} {
            SupplierInfo supplierInfoEntity = <SupplierInfo>value.supplier;
            SupplierInfoClient supplierInfoClient = check new SupplierInfoClient();
            check supplierInfoClient->update(supplierInfoEntity);
        }
        if value.quotation is record {} {
            Quote quoteEntity = <Quote>value.quotation;
            QuoteClient quoteClient = check new QuoteClient();
            check quoteClient->update(quoteEntity);
        }
    }

    remote function delete(AidPackageOrderItem value) returns persist:Error? {
        _ = check self.persistClient.runDeleteQuery(value);
    }

    remote function exists(AidPackageOrderItem aidPackageOrderItem) returns boolean|persist:Error {
        AidPackageOrderItem|persist:Error result = self->readByKey(aidPackageOrderItem.id);
        if result is AidPackageOrderItem {
            return true;
        } else if result is persist:InvalidKeyError {
            return false;
        } else {
            return result;
        }
    }

    public function close() returns persist:Error? {
        return self.persistClient.close();
    }
}

public enum AidPackageOrderItemRelations {
    AidPackageEntity = "package", MedicalNeedEntity = "medicalNeed", SupplierInfoEntity = "supplier", QuoteEntity = "quotation"
}

public class AidPackageOrderItemStream {

    private stream<anydata, sql:Error?>? anydataStream;
    private persist:Error? err;

    public isolated function init(stream<anydata, sql:Error?>? anydataStream, persist:Error? err = ()) {
        self.anydataStream = anydataStream;
        self.err = err;
    }

    public isolated function next() returns record {|AidPackageOrderItem value;|}|persist:Error? {
        if self.err is persist:Error {
            return <persist:Error>self.err;
        } else if self.anydataStream is stream<anydata, sql:Error?> {
            var anydataStream = <stream<anydata, sql:Error?>>self.anydataStream;
            var streamValue = anydataStream.next();
            if streamValue is () {
                return streamValue;
            } else if (streamValue is sql:Error) {
                return <persist:Error>error(streamValue.message());
            } else {
                record {|AidPackageOrderItem value;|} nextRecord = {value: <AidPackageOrderItem>streamValue.value};
                return nextRecord;
            }
        } else {
            return ();
        }
    }

    public isolated function close() returns persist:Error? {
        if self.anydataStream is stream<anydata, sql:Error?> {
            var anydataStream = <stream<anydata, sql:Error?>>self.anydataStream;
            sql:Error? e = anydataStream.close();
            if e is sql:Error {
                return <persist:Error>error(e.message());
            }
        }
    }
}

